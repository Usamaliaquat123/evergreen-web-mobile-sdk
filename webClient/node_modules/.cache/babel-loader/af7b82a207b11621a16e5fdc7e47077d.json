{"ast":null,"code":"// import React, { createContext, useState, useEffect } from \"react\";\n// import { BoxLoading } from \"react-loadingg\";\n// import { useMethods } from \"react-use\";\n// import categoryService from '../services/CategoryService';\n// const initialState = {\n//   allUsers: [],\n//   allQuestions: [],\n//   allCategories: [],\n//   allTopics: [],\n// };\n//   function createMethods(state) {\n//     return {\n//       reset() {\n//         return initialState;\n//       },\n//       initUsers(allUsers) {\n//         return { ...state, allUsers };\n//       },\n//       initCategories(allCategories) {\n//         return { ...state, allCategories };\n//       },\n//       /**\n//        * ! USERS/ADMIN -- REDUCERS \n//        */\n//       addNewUser(user){\n//         return {...state, allUsers:state.allUsers.concat(user)}\n//       },\n//       deleteUser(id){\n//         return {...state, allUsers:state.allUsers.filter((u=>id!==u.id))}\n//       },\n//       editUser(user){\n//         const updatedUsers =[]\n//         // eslint-disable-next-line array-callback-return\n//         state.allUsers.map((item)=>{\n//           if(user.id === item.id)updatedUsers.push(user);\n//           else updatedUsers.push(item)\n//         })\n//         return {...state,allUsers:updatedUsers}\n//         },\n//     };\n//   }\n// export const AppContext = createContext();\n// export default ({ children }) => {\n//   const [loaded, setLoaded] = useState(false);\n//   const [store, methods] = useMethods(createMethods, initialState);\n// \tuseEffect(async() => {\n//         try{\n//             const  allCategories=await categoryService.allCatgories()\n//                             await methods.initCategories(allCategories.data)\n//             setLoaded(true)\n//         }\n//         catch(err){\n//             console.log(err)\n//             setLoaded(true)\n//         }\n// \t}, []);\n// \treturn (\n// \t\t<div>\n// \t\t\t{!loaded ? (\n// \t\t\t\t<BoxLoading />\n// \t\t\t) : (\n// \t\t\t\t<AppContext.Provider\n// \t\t\t\t\tvalue={{\n// \t\t\t\t\t\tstore,methods\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\t{children}\n// \t\t\t\t</AppContext.Provider>\n// \t\t\t)}\n// \t\t</div>\n// \t);\n// };","map":{"version":3,"sources":["/home/asd/Desktop/development/evergReen/client/src/context/appContext.jsx"],"names":[],"mappings":"AAAA;AAEA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { createContext, useState, useEffect } from \"react\";\n\n// import { BoxLoading } from \"react-loadingg\";\n\n// import { useMethods } from \"react-use\";\n\n// import categoryService from '../services/CategoryService';\n\n\n\n\n// const initialState = {\n//   allUsers: [],\n//   allQuestions: [],\n//   allCategories: [],\n//   allTopics: [],\n// };\n\n\n//   function createMethods(state) {\n//     return {\n//       reset() {\n//         return initialState;\n//       },\n//       initUsers(allUsers) {\n//         return { ...state, allUsers };\n//       },\n//       initCategories(allCategories) {\n//         return { ...state, allCategories };\n//       },\n     \n//       /**\n//        * ! USERS/ADMIN -- REDUCERS \n//        */\n//       addNewUser(user){\n//         return {...state, allUsers:state.allUsers.concat(user)}\n//       },\n//       deleteUser(id){\n//         return {...state, allUsers:state.allUsers.filter((u=>id!==u.id))}\n//       },\n//       editUser(user){\n//         const updatedUsers =[]\n//         // eslint-disable-next-line array-callback-return\n//         state.allUsers.map((item)=>{\n//           if(user.id === item.id)updatedUsers.push(user);\n//           else updatedUsers.push(item)\n//         })\n//         return {...state,allUsers:updatedUsers}\n//         },\n     \n//     };\n//   }\n\n// export const AppContext = createContext();\n\n// export default ({ children }) => {\n//   const [loaded, setLoaded] = useState(false);\n//   const [store, methods] = useMethods(createMethods, initialState);\n\n\n\n\n// \tuseEffect(async() => {\n//         try{\n         \n//             const  allCategories=await categoryService.allCatgories()\n//                             await methods.initCategories(allCategories.data)\n\n//             setLoaded(true)\n//         }\n//         catch(err){\n//             console.log(err)\n//             setLoaded(true)\n//         }\n      \n        \n// \t}, []);\n// \treturn (\n// \t\t<div>\n// \t\t\t{!loaded ? (\n// \t\t\t\t<BoxLoading />\n// \t\t\t) : (\n// \t\t\t\t<AppContext.Provider\n// \t\t\t\t\tvalue={{\n// \t\t\t\t\t\tstore,methods\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\t{children}\n// \t\t\t\t</AppContext.Provider>\n// \t\t\t)}\n// \t\t</div>\n// \t);\n// };"]},"metadata":{},"sourceType":"module"}