{"ast":null,"code":"import SERVER_URL from '../environment';\nexport default {\n  login: user => {\n    console.log(\" %c *** login[/user/login][POST] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n    console.log({\n      user\n    });\n    const username = user.username[0];\n    const password = user.password[0];\n    return fetch(`${SERVER_URL}/user/login`, {\n      method: \"post\",\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.status !== 401) {\n        return res.json().then(data => data);\n      }\n\n      return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\"\n        }\n      };\n    });\n  },\n  register: user => {\n    console.log(\" %c *** register[/user/register][POST] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n    return fetch(`${SERVER_URL}/user/register`, {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(data => data);\n  },\n  logout: () => {\n    console.log(\" %c *** logout[/user/login][POST] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n    return fetch(`${SERVER_URL}/user/logout`).then(res => res.json()).then(data => data);\n  },\n\n  /*\n  ! Sync backend and frontend (even after browser closes)\n  ! call this function with context API\n  */\n  isAuthenticated: () => {\n    return fetch(`${SERVER_URL}/user/authenticated`).then(res => {\n      console.log(\" %c *** isAuthenticated[/user/authenticated][GET] *** \", \"font-size: 12px; font-weight: bold;color:green\");\n\n      if (res.status !== 401) {\n        return res.json().then(data => data);\n      }\n\n      return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\"\n        }\n      };\n    }).then(data => data);\n  }\n};","map":{"version":3,"sources":["/home/asd/Desktop/DART/nativeTarget/webClient/src/services/AuthService.jsx"],"names":["SERVER_URL","login","user","console","log","username","password","fetch","method","body","JSON","stringify","headers","then","res","status","json","data","isAuthenticated","role","register","logout"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,gBAAvB;AAGA,eAAe;AACbC,EAAAA,KAAK,EAAGC,IAAD,IAAU;AACfC,IAAAA,OAAO,CAACC,GAAR,CACE,uCADF,EAEE,gDAFF;AAIAD,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,MAAAA;AAAF,KAAZ;AACA,UAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAL,CAAc,CAAd,CAAjB;AACA,UAAMC,QAAQ,GAAGJ,IAAI,CAACI,QAAL,CAAc,CAAd,CAAjB;AAEA,WAAOC,KAAK,CAAE,GAAEP,UAAW,aAAf,EAA6B;AACvCQ,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBN,QAAAA,QADmB;AAEnBC,QAAAA;AAFmB,OAAf,CAFiC;AAMvCM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAN8B,KAA7B,CAAL,CASJC,IATI,CASEC,GAAD,IAAS;AACf,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAiBI,IAAD,IAAUA,IAA1B,CAAP;AACD;;AACC,aAAO;AAAEC,QAAAA,eAAe,EAAE,KAAnB;AAA0BhB,QAAAA,IAAI,EAAE;AAAEG,UAAAA,QAAQ,EAAE,EAAZ;AAAgBc,UAAAA,IAAI,EAAE;AAAtB;AAAhC,OAAP;AAEH,KAfM,CAAP;AAgBD,GA1BY;AA4BbC,EAAAA,QAAQ,EAAGlB,IAAD,IAAU;AAClBC,IAAAA,OAAO,CAACC,GAAR,CACE,6CADF,EAEE,gDAFF;AAIA,WAAOG,KAAK,CAAE,GAAEP,UAAW,gBAAf,EAAgC;AAC1CQ,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAFoC;AAG1CU,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHiC,KAAhC,CAAL,CAOJC,IAPI,CAOEC,GAAD,IAASA,GAAG,CAACE,IAAJ,EAPV,EAQJH,IARI,CAQEI,IAAD,IAAUA,IARX,CAAP;AASD,GA1CY;AA4CbI,EAAAA,MAAM,EAAE,MAAM;AACZlB,IAAAA,OAAO,CAACC,GAAR,CACE,wCADF,EAEE,gDAFF;AAIA,WAAOG,KAAK,CAAE,GAAEP,UAAW,cAAf,CAAL,CACJa,IADI,CACEC,GAAD,IAASA,GAAG,CAACE,IAAJ,EADV,EAEJH,IAFI,CAEEI,IAAD,IAAUA,IAFX,CAAP;AAGD,GApDY;;AAqDb;AACF;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,MAAM;AACrB,WAAOX,KAAK,CAAE,GAAEP,UAAW,qBAAf,CAAL,CACJa,IADI,CACEC,GAAD,IAAS;AACbX,MAAAA,OAAO,CAACC,GAAR,CACE,wDADF,EAEE,gDAFF;;AAIA,UAAIU,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAiBI,IAAD,IAAUA,IAA1B,CAAP;AACD;;AACC,aAAO;AAAEC,QAAAA,eAAe,EAAE,KAAnB;AAA0BhB,QAAAA,IAAI,EAAE;AAAEG,UAAAA,QAAQ,EAAE,EAAZ;AAAgBc,UAAAA,IAAI,EAAE;AAAtB;AAAhC,OAAP;AAEH,KAXI,EAYJN,IAZI,CAYEI,IAAD,IAAUA,IAZX,CAAP;AAaD;AAvEY,CAAf","sourcesContent":["import SERVER_URL from '../environment'\n\n\nexport default {\n  login: (user) => {\n    console.log(\n      \" %c *** login[/user/login][POST] *** \",\n      \"font-size: 12px; font-weight: bold;color:green\"\n    );\n    console.log({ user });\n    const username = user.username[0];\n    const password = user.password[0];\n\n    return fetch(`${SERVER_URL}/user/login`, {\n      method: \"post\",\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((res) => {\n      if (res.status !== 401) {\n        return res.json().then((data) => data);\n      } \n        return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\n      \n    });\n  },\n\n  register: (user) => {\n    console.log(\n      \" %c *** register[/user/register][POST] *** \",\n      \"font-size: 12px; font-weight: bold;color:green\"\n    );\n    return fetch(`${SERVER_URL}/user/register`, {\n      method: \"post\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => data);\n  },\n\n  logout: () => {\n    console.log(\n      \" %c *** logout[/user/login][POST] *** \",\n      \"font-size: 12px; font-weight: bold;color:green\"\n    );\n    return fetch(`${SERVER_URL}/user/logout`)\n      .then((res) => res.json())\n      .then((data) => data);\n  },\n  /*\n! Sync backend and frontend (even after browser closes)\n! call this function with context API\n*/\n  isAuthenticated: () => {\n    return fetch(`${SERVER_URL}/user/authenticated`)\n      .then((res) => {\n        console.log(\n          \" %c *** isAuthenticated[/user/authenticated][GET] *** \",\n          \"font-size: 12px; font-weight: bold;color:green\"\n        );\n        if (res.status !== 401) {\n          return res.json().then((data) => data);\n        } \n          return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\n        \n      })\n      .then((data) => data);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}