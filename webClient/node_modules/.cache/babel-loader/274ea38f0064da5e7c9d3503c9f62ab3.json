{"ast":null,"code":"export default {\n  createCategory: async payload => {\n    let fd = new FormData();\n    fd.append('catName', payload.catName);\n    fd.append('catDescription', payload.catDescription);\n    fd.append('<NAME>', payload.catImage[0]);\n    let request = await fetch(\"/category/create\", {\n      method: \"POST\",\n      body: fd,\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (request.status !== 401) return await request.json();\n  },\n  categoryAlreadyExist: async catName => {\n    let request = await fetch(\"/category/validate/alreadyExist\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        catName: catName\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (request.status !== 401) return await request.json();\n  },\n  allCatgories: async () => {\n    let request = await fetch(\"/category/all\", {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (request.status !== 401) return await request.json();\n  },\n  deleteCatgeory: async catName => {\n    console.log(\"***-  deleteCatgeory:async(catName) -***\");\n    console.log(catName);\n    let request = await fetch(`/category/delete?catName=${catName}`);\n    if (request.status !== 401) return await request.json();\n  },\n  updateCatgeory: async () => {\n    let request = await fetch(\"/category/delete/{catName}\", {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (request.status !== 401) return await request.json();\n  }\n};","map":{"version":3,"sources":["/home/asd/Desktop/development/evergReen/client/src/services/CategoryServce.jsx"],"names":["createCategory","payload","fd","FormData","append","catName","catDescription","catImage","request","fetch","method","body","headers","status","json","categoryAlreadyExist","JSON","stringify","allCatgories","deleteCatgeory","console","log","updateCatgeory"],"mappings":"AAAA,eAAe;AACXA,EAAAA,cAAc,EAAE,MAAMC,OAAN,IAAkB;AAC9B,QAAIC,EAAE,GAAE,IAAIC,QAAJ,EAAR;AACDD,IAAAA,EAAE,CAACE,MAAH,CAAU,SAAV,EAAoBH,OAAO,CAACI,OAA5B;AACAH,IAAAA,EAAE,CAACE,MAAH,CAAU,gBAAV,EAA2BH,OAAO,CAACK,cAAnC;AACAJ,IAAAA,EAAE,CAACE,MAAH,CAAU,QAAV,EAAmBH,OAAO,CAACM,QAAR,CAAiB,CAAjB,CAAnB;AACA,QAAIC,OAAO,GAAE,MAAOC,KAAK,CAAC,kBAAD,EAAqB;AAACC,MAAAA,MAAM,EAAE,MAAT;AAAgBC,MAAAA,IAAI,EAAET,EAAtB;AAA0BU,MAAAA,OAAO,EAAE;AAAC,kBAAU;AAAX;AAAnC,KAArB,CAAzB;AACA,QAAGJ,OAAO,CAACK,MAAR,KAAiB,GAApB,EAAyB,OAAO,MAAML,OAAO,CAACM,IAAR,EAAb;AAE/B,GATc;AAUfC,EAAAA,oBAAoB,EAAE,MAAMV,OAAN,IAAkB;AACrC,QAAIG,OAAO,GAAE,MAAOC,KAAK,CAAC,iCAAD,EAAoC;AAACC,MAAAA,MAAM,EAAE,MAAT;AAAgBC,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAe;AAACZ,QAAAA,OAAO,EAACA;AAAT,OAAf,CAAtB;AAAwDO,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAjE,KAApC,CAAzB;AACA,QAAGJ,OAAO,CAACK,MAAR,KAAiB,GAApB,EAAyB,OAAO,MAAML,OAAO,CAACM,IAAR,EAAb;AAE3B,GAdc;AAefI,EAAAA,YAAY,EAAE,YAAW;AACrB,QAAIV,OAAO,GAAE,MAAOC,KAAK,CAAC,eAAD,EAAkB;AAACC,MAAAA,MAAM,EAAE,KAAT;AAAeE,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAxB,KAAlB,CAAzB;AACA,QAAGJ,OAAO,CAACK,MAAR,KAAiB,GAApB,EAAyB,OAAO,MAAML,OAAO,CAACM,IAAR,EAAb;AAE3B,GAnBa;AAoBdK,EAAAA,cAAc,EAAC,MAAMd,OAAN,IAAgB;AAC3Be,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ;AACD,QAAIG,OAAO,GAAE,MAAOC,KAAK,CAAE,4BAA2BJ,OAAQ,EAArC,CAAzB;AACA,QAAGG,OAAO,CAACK,MAAR,KAAiB,GAApB,EAAyB,OAAO,MAAML,OAAO,CAACM,IAAR,EAAb;AAC3B,GAzBa;AA0BdQ,EAAAA,cAAc,EAAC,YAAS;AACrB,QAAId,OAAO,GAAE,MAAOC,KAAK,CAAC,4BAAD,EAA+B;AAACC,MAAAA,MAAM,EAAE,KAAT;AAAeE,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAxB,KAA/B,CAAzB;AACA,QAAGJ,OAAO,CAACK,MAAR,KAAiB,GAApB,EAAyB,OAAO,MAAML,OAAO,CAACM,IAAR,EAAb;AAC3B;AA7Ba,CAAf","sourcesContent":["export default {\n    createCategory: async(payload) => {\n        let fd= new FormData()\n       fd.append('catName',payload.catName)\n       fd.append('catDescription',payload.catDescription)\n       fd.append('<NAME>',payload.catImage[0])\n       let request =await  fetch(\"/category/create\", {method: \"POST\",body: fd, headers: {'Accept': 'application/json'}, });\n       if(request.status!==401) return await request.json() \n      \n},\ncategoryAlreadyExist: async(catName) => {\n   let request =await  fetch(\"/category/validate/alreadyExist\", {method: \"POST\",body: JSON.stringify({catName:catName}),headers: {'Content-Type': 'application/json'}, });\n   if(request.status!==401) return await request.json() \n  \n},\nallCatgories: async() => {\n    let request =await  fetch(\"/category/all\", {method: \"GET\",headers: {'Content-Type': 'application/json'} });\n    if(request.status!==401) return await request.json() \n   \n },\n deleteCatgeory:async(catName)=>{\n     console.log(\"***-  deleteCatgeory:async(catName) -***\")\n     console.log(catName)\n    let request =await  fetch(`/category/delete?catName=${catName}`);\n    if(request.status!==401) return await request.json() \n },\n updateCatgeory:async()=>{\n    let request =await  fetch(\"/category/delete/{catName}\", {method: \"GET\",headers: {'Content-Type': 'application/json'}, });\n    if(request.status!==401) return await request.json() \n }\n}"]},"metadata":{},"sourceType":"module"}