{"ast":null,"code":"var _jsxFileName = \"/home/asd/Desktop/development/evergReen/client/src/component/Admin/AdminPages/CategoryPage/AddCategory.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from 'yup';\nimport CategoryService from '../../../../services/CategoryServce';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport 'react-notifications/lib/notifications.css';\nimport Loader from 'react-loader-spinner';\nimport ReusableModal from './../../../ReusableComponents/ReusableModal';\nimport AllCategories from '../CategoryPage/AllCategories';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n/* Validation starts here */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  catName: yup.string().required(function (value) {\n    NotificationManager.error('Category Name  is Required');\n  }),\n  catDescription: yup.string().required(function (value) {\n    NotificationManager.error('Category Description is  Required');\n  })\n});\n/* Validation ends here */\n\n/* Functional componennet starts here */\n\nconst Register = props => {\n  _s();\n\n  const [loader, setLoader] = React.useState(true);\n  const [modalToggler, setModalToggler] = React.useState(false);\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit',\n    criteriaMode: 'firstError',\n    shouldFocusError: true,\n    shouldUnregister: true\n  });\n\n  const resetForm = () => {};\n\n  const onSubmit = async formData => {\n    // setLoader(false);\n    let categoryExist = await CategoryService.categoryAlreadyExist(formData.catName);\n\n    if (categoryExist.payload) {\n      NotificationManager.error(categoryExist.msgBody);\n      setModalToggler(true);\n    } else {\n      CategoryService.createCategory(formData).then(res => {\n        if (res.success) {\n          NotificationManager.success(res.msgBody);\n          reset();\n          setModalToggler(false); // setLoader(true);\n        } else {\n          NotificationManager.error(res.msgBody);\n          setModalToggler(false); // setLoader(true);\n        }\n      }).catch(err => {\n        console.log(err);\n        setModalToggler(false); // setLoader(true);\n      });\n    }\n  };\n\n  const AddCategoryForm = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row justify-content-center align-items-center mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"catName\",\n          className: \"mr-2\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control form-control-sm custom-input-register\",\n          name: \"catName\",\n          id: \"catName\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row justify-content-center align-items-center mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"catDescription\",\n          className: \"mr-2\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control form-control-sm custom-input-register\",\n          name: \"catDescription\",\n          id: \"catDescription\",\n          type: \"text\",\n          ref: register,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row justify-content-center align-items-center mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"catImage\",\n          className: \"mr-2\",\n          children: \"Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control form-control-sm custom-input-register\",\n          name: \"catImage\",\n          id: \"catImage\",\n          type: \"file\" // multiple={false}\n          ,\n          ref: register,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [loader ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid h-100 \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-success btn-sm pull-right\",\n                onClick: () => {\n                  setModalToggler(!modalToggler);\n                },\n                children: \"Add Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: /*#__PURE__*/_jsxDEV(AllCategories, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-footer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        encType: \"multipart/form-data\",\n        children: /*#__PURE__*/_jsxDEV(ReusableModal, {\n          modalTitle: \"Category\",\n          ModalContent: /*#__PURE__*/_jsxDEV(AddCategoryForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this),\n          ModalToggler: modalToggler,\n          setModalToggler: setModalToggler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"Puff\",\n      color: \"#00BFFF\",\n      height: 100,\n      width: 100,\n      timeout: 3000 //3 secs\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(NotificationContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"Kz9nxhnpwP/cHIghaHs8sJy31A4=\", false, function () {\n  return [useForm];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/home/asd/Desktop/development/evergReen/client/src/component/Admin/AdminPages/CategoryPage/AddCategory.jsx"],"names":["React","useState","useRef","useEffect","useForm","yupResolver","yup","CategoryService","Loader","ReusableModal","AllCategories","NotificationContainer","NotificationManager","schema","object","shape","catName","string","required","value","error","catDescription","Register","props","loader","setLoader","modalToggler","setModalToggler","register","handleSubmit","reset","resolver","mode","reValidateMode","criteriaMode","shouldFocusError","shouldUnregister","resetForm","onSubmit","formData","categoryExist","categoryAlreadyExist","payload","msgBody","createCategory","then","res","success","catch","err","console","log","AddCategoryForm"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers';\nimport * as yup from 'yup';\nimport CategoryService from '../../../../services/CategoryServce';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport 'react-notifications/lib/notifications.css';\nimport Loader from 'react-loader-spinner';\nimport ReusableModal from './../../../ReusableComponents/ReusableModal';\nimport AllCategories from '../CategoryPage/AllCategories';\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from 'react-notifications';\n/* Validation starts here */\nconst schema = yup.object().shape({\n  catName: yup.string().required(function (value) {\n    NotificationManager.error('Category Name  is Required');\n  }),\n  catDescription: yup.string().required(function (value) {\n    NotificationManager.error('Category Description is  Required');\n  }),\n});\n\n/* Validation ends here */\n/* Functional componennet starts here */\n\nconst Register = (props) => {\n  const [loader, setLoader] = React.useState(true);\n  const [modalToggler, setModalToggler] = React.useState(false);\n  const { register, handleSubmit, reset } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onSubmit',\n    reValidateMode: 'onSubmit',\n    criteriaMode: 'firstError',\n    shouldFocusError: true,\n    shouldUnregister: true,\n  });\n\n  const resetForm = () => {};\n\n  const onSubmit = async (formData) => {\n    // setLoader(false);\n    let categoryExist = await CategoryService.categoryAlreadyExist(\n      formData.catName\n    );\n    if (categoryExist.payload) {\n      NotificationManager.error(categoryExist.msgBody);\n      setModalToggler(true);\n    } else {\n      CategoryService.createCategory(formData)\n        .then((res) => {\n          if (res.success) {\n            NotificationManager.success(res.msgBody);\n            reset();\n            setModalToggler(false);\n            // setLoader(true);\n          } else {\n            NotificationManager.error(res.msgBody);\n            setModalToggler(false);\n            // setLoader(true);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          setModalToggler(false);\n          // setLoader(true);\n        });\n    }\n  };\n\n  const AddCategoryForm = () => {\n    return (\n      <div className=\"\">\n        <div className=\"d-flex flex-row justify-content-center align-items-center mt-2\">\n          <label htmlFor=\"catName\" className=\"mr-2\">\n             Name\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control form-control-sm custom-input-register\"\n            name=\"catName\"\n            id=\"catName\"\n            ref={register}\n          />\n        </div>\n        <div className=\"d-flex flex-row justify-content-center align-items-center mt-2\">\n          <label htmlFor=\"catDescription\" className=\"mr-2\">\n             Description\n          </label>\n          <textarea\n            className=\"form-control form-control-sm custom-input-register\"\n            name=\"catDescription\"\n            id=\"catDescription\"\n            type=\"text\"\n            ref={register}\n            required\n          ></textarea>\n        </div>\n\n        <div className=\"d-flex flex-row justify-content-center align-items-center mt-2\">\n          <label htmlFor=\"catImage\" className=\"mr-2\">\n             Image\n          </label>\n          <input\n            className=\"form-control form-control-sm custom-input-register\"\n            name=\"catImage\"\n            id=\"catImage\"\n            type=\"file\"\n            // multiple={false}\n            ref={register}\n            required\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      {loader ? (\n        <div className=\"container-fluid h-100 \">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"card\">\n                <div className=\"card-header\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-success btn-sm pull-right\"\n                    onClick={() => {\n                      setModalToggler(!modalToggler);\n                    }}\n                  >\n                    Add Category\n                  </button>\n                </div>\n                <div className=\"card-body\">\n                  <AllCategories />\n                </div>\n                <div className=\"card-footer\"></div>\n              </div>\n            </div>\n          </div>\n          <form onSubmit={handleSubmit(onSubmit)} encType=\"multipart/form-data\">\n            <ReusableModal\n              modalTitle=\"Category\"\n              ModalContent={<AddCategoryForm />}\n              ModalToggler={modalToggler}\n              setModalToggler={setModalToggler}\n            />\n          </form>\n        </div>\n      ) : (\n        <Loader\n          type=\"Puff\"\n          color=\"#00BFFF\"\n          height={100}\n          width={100}\n          timeout={3000} //3 secs\n        />\n      )}\n      <NotificationContainer />\n    </React.Fragment>\n  );\n};\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}