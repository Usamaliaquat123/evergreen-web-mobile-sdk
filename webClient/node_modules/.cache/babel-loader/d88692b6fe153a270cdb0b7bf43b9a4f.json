{"ast":null,"code":"var _jsxFileName = \"/home/asd/Desktop/development/evergReen/client/src/component/Todos.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useRef } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TodoService from \"../services/TodoService\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport Message from \"./Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todo = props => {\n  _s();\n\n  const [todo, setTodo] = useState({\n    name: \"\"\n  });\n  const [todos, setTodos] = useState([]);\n  const [message, setMessage] = useState(null);\n  const authContext = useContext(AuthContext);\n  useEffect(() => {\n    TodoService.getTodos().then(data => {\n      //   console.log(data[\"todos\"]);\n      setTodos(data[\"todos\"]);\n    });\n  }, []);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    TodoService.postTodo(todo).then(data => {\n      const {\n        message\n      } = data;\n      resetForm();\n\n      if (!message.msgError) {\n        TodoService.getTodos().then(getData => {\n          setTodos(getData.todos);\n          setMessage(message);\n        });\n      } //client token expired\n      else if (message.msgBody === \"unAuthrozied\") {\n          setMessage(message); //update global state incase token expires\n\n          authContext.setUser({\n            username: \"\",\n            role: \"\"\n          });\n          authContext.setIsAuthenticated(false);\n        } //error condition handled here\n        else {\n            setMessage(message);\n          }\n    });\n  };\n\n  const onChange = e => {\n    setTodo({\n      name: e.target.value\n    });\n  };\n\n  const resetForm = () => {\n    setTodo({\n      name: \"\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: todos.map(todo => {\n        return /*#__PURE__*/_jsxDEV(TodoItem, {\n          todo: todo\n        }, todo._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"todo\",\n        children: \"Enter Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        onChange: onChange,\n        value: todo.name,\n        name: \"name\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-lg btn-success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), message ? /*#__PURE__*/_jsxDEV(Message, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 18\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todo, \"efLnvsIZEwKOPrC3pqMtwLvCwlk=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/home/asd/Desktop/development/evergReen/client/src/component/Todos.jsx"],"names":["React","useState","useContext","useEffect","useRef","TodoItem","TodoService","AuthContext","Message","Todo","props","todo","setTodo","name","todos","setTodos","message","setMessage","authContext","getTodos","then","data","onSubmit","e","preventDefault","postTodo","resetForm","msgError","getData","msgBody","setUser","username","role","setIsAuthenticated","onChange","target","value","map","_id"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport TodoService from \"../services/TodoService\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport Message from \"./Message\";\n\nconst Todo = (props) => {\n  const [todo, setTodo] = useState({ name: \"\" });\n  const [todos, setTodos] = useState([]);\n  const [message, setMessage] = useState(null);\n  const authContext = useContext(AuthContext);\n\n  useEffect(() => {\n    TodoService.getTodos().then((data) => {\n      //   console.log(data[\"todos\"]);\n      setTodos(data[\"todos\"]);\n    });\n  }, []);\n  const onSubmit = (e) => {\n    e.preventDefault();\n    TodoService.postTodo(todo).then((data) => {\n      const { message } = data;\n      resetForm();\n      if (!message.msgError) {\n        TodoService.getTodos().then((getData) => {\n          setTodos(getData.todos);\n          setMessage(message);\n        });\n      }\n      //client token expired\n      else if (message.msgBody === \"unAuthrozied\") {\n        setMessage(message);\n        //update global state incase token expires\n        authContext.setUser({ username: \"\", role: \"\" });\n        authContext.setIsAuthenticated(false);\n      }\n      //error condition handled here\n      else {\n        setMessage(message);\n      }\n    });\n  };\n  const onChange = (e) => {\n    setTodo({ name: e.target.value });\n  };\n\n  const resetForm = () => {\n    setTodo({ name: \"\" });\n  };\n  return (\n    <div>\n      <ul className=\"list-group\">\n        {todos.map((todo) => {\n          return <TodoItem key={todo._id} todo={todo} />;\n        })}\n      </ul>\n\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"todo\">Enter Todo</label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          onChange={onChange}\n          value={todo.name}\n          name=\"name\"\n          required\n        />\n        <button type=\"submit\" className=\"btn btn-lg btn-success\"></button>\n      </form>\n      {message ? <Message message={message} /> : null}\n    </div>\n  );\n};\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}